// Code generated by goctl. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	walletLoginNonceFieldNames          = builder.RawFieldNames(&WalletLoginNonce{})
	walletLoginNonceRows                = strings.Join(walletLoginNonceFieldNames, ",")
	walletLoginNonceRowsExpectAutoSet   = strings.Join(stringx.Remove(walletLoginNonceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	walletLoginNonceRowsWithPlaceHolder = strings.Join(stringx.Remove(walletLoginNonceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	walletLoginNonceModel interface {
		Insert(ctx context.Context, data *WalletLoginNonce) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*WalletLoginNonce, error)
		Update(ctx context.Context, data *WalletLoginNonce) error
		Delete(ctx context.Context, id int64) error
	}

	defaultWalletLoginNonceModel struct {
		conn  sqlx.SqlConn
		table string
	}

	WalletLoginNonce struct {
		Id            int64     `db:"id"`
		WalletType    int64     `db:"wallet_type"`    // 1:evm|2:solana|3:ton
		WalletAddress string    `db:"wallet_address"` // max_length()=
		Nonce         string    `db:"nonce"`
		CreatedAt     time.Time `db:"created_at"`
	}
)

func newWalletLoginNonceModel(conn sqlx.SqlConn) *defaultWalletLoginNonceModel {
	return &defaultWalletLoginNonceModel{
		conn:  conn,
		table: "`wallet_login_nonce`",
	}
}

func (m *defaultWalletLoginNonceModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultWalletLoginNonceModel) FindOne(ctx context.Context, id int64) (*WalletLoginNonce, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", walletLoginNonceRows, m.table)
	var resp WalletLoginNonce
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWalletLoginNonceModel) Insert(ctx context.Context, data *WalletLoginNonce) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, walletLoginNonceRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.WalletType, data.WalletAddress, data.Nonce)
	return ret, err
}

func (m *defaultWalletLoginNonceModel) Update(ctx context.Context, data *WalletLoginNonce) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, walletLoginNonceRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.WalletType, data.WalletAddress, data.Nonce, data.Id)
	return err
}

func (m *defaultWalletLoginNonceModel) tableName() string {
	return m.table
}
