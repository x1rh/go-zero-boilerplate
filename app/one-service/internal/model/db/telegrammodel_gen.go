// Code generated by goctl. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	telegramFieldNames          = builder.RawFieldNames(&Telegram{})
	telegramRows                = strings.Join(telegramFieldNames, ",")
	telegramRowsExpectAutoSet   = strings.Join(stringx.Remove(telegramFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	telegramRowsWithPlaceHolder = strings.Join(stringx.Remove(telegramFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	telegramModel interface {
		Insert(ctx context.Context, data *Telegram) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Telegram, error)
		FindOneByUid(ctx context.Context, uid int64) (*Telegram, error)
		Update(ctx context.Context, data *Telegram) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTelegramModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Telegram struct {
		Id        int64     `db:"id"` // telegram uid|TODO: insertion perfomance
		Uid       int64     `db:"uid"`
		Username  string    `db:"username"`
		FirstName string    `db:"first_name"`
		LastName  string    `db:"last_name"`
		CreatdAt  time.Time `db:"creatd_at"`
		UpdatedAt time.Time `db:"updated_at"`
	}
)

func newTelegramModel(conn sqlx.SqlConn) *defaultTelegramModel {
	return &defaultTelegramModel{
		conn:  conn,
		table: "`telegram`",
	}
}

func (m *defaultTelegramModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTelegramModel) FindOne(ctx context.Context, id int64) (*Telegram, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", telegramRows, m.table)
	var resp Telegram
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTelegramModel) FindOneByUid(ctx context.Context, uid int64) (*Telegram, error) {
	var resp Telegram
	query := fmt.Sprintf("select %s from %s where `uid` = ? limit 1", telegramRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, uid)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTelegramModel) Insert(ctx context.Context, data *Telegram) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, telegramRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Uid, data.Username, data.FirstName, data.LastName, data.CreatdAt)
	return ret, err
}

func (m *defaultTelegramModel) Update(ctx context.Context, newData *Telegram) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, telegramRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Uid, newData.Username, newData.FirstName, newData.LastName, newData.CreatdAt, newData.Id)
	return err
}

func (m *defaultTelegramModel) tableName() string {
	return m.table
}
