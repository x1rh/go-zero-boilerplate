// Code generated by goctl. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	walletFieldNames          = builder.RawFieldNames(&Wallet{})
	walletRows                = strings.Join(walletFieldNames, ",")
	walletRowsExpectAutoSet   = strings.Join(stringx.Remove(walletFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	walletRowsWithPlaceHolder = strings.Join(stringx.Remove(walletFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	walletModel interface {
		Insert(ctx context.Context, data *Wallet) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Wallet, error)
		FindOneByUid(ctx context.Context, uid int64) (*Wallet, error)
		FindOneByWalletAddressWalletTypeIsDeleted(ctx context.Context, walletAddress string, walletType int64, isDeleted int64) (*Wallet, error)
		Update(ctx context.Context, data *Wallet) error
		Delete(ctx context.Context, id int64) error
	}

	defaultWalletModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Wallet struct {
		Id            int64     `db:"id"`
		Uid           int64     `db:"uid"`
		WalletType    int64     `db:"wallet_type"` // 1:ethereum-compatible wallet|2:solana|3:ton
		WalletAddress string    `db:"wallet_address"`
		ChainId       int64     `db:"chain_id"`
		ChainName     string    `db:"chain_name"`
		CreatedAt     time.Time `db:"created_at"`
		UpdatedAt     time.Time `db:"updated_at"`
		IsDeleted     int64     `db:"is_deleted"`
	}
)

func newWalletModel(conn sqlx.SqlConn) *defaultWalletModel {
	return &defaultWalletModel{
		conn:  conn,
		table: "`wallet`",
	}
}

func (m *defaultWalletModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultWalletModel) FindOne(ctx context.Context, id int64) (*Wallet, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", walletRows, m.table)
	var resp Wallet
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWalletModel) FindOneByUid(ctx context.Context, uid int64) (*Wallet, error) {
	var resp Wallet
	query := fmt.Sprintf("select %s from %s where `uid` = ? limit 1", walletRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, uid)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWalletModel) FindOneByWalletAddressWalletTypeIsDeleted(ctx context.Context, walletAddress string, walletType int64, isDeleted int64) (*Wallet, error) {
	var resp Wallet
	query := fmt.Sprintf("select %s from %s where `wallet_address` = ? and `wallet_type` = ? and `is_deleted` = ? limit 1", walletRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, walletAddress, walletType, isDeleted)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWalletModel) Insert(ctx context.Context, data *Wallet) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, walletRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Uid, data.WalletType, data.WalletAddress, data.ChainId, data.ChainName, data.IsDeleted)
	return ret, err
}

func (m *defaultWalletModel) Update(ctx context.Context, newData *Wallet) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, walletRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Uid, newData.WalletType, newData.WalletAddress, newData.ChainId, newData.ChainName, newData.IsDeleted, newData.Id)
	return err
}

func (m *defaultWalletModel) tableName() string {
	return m.table
}
